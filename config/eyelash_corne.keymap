#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include "keys_sv.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;

            label = "SHIFT_CAPS";
        };

        volume_encoder: volume_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_VOLUME_KNOB";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <45 46 47 36 37 8 9 10 11 12 23 24 25 26 27 37 38 39 40 41 7 22>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 34 42 43 44>;
        };

        hue_encoder: hue_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;

            label = "HUE_ENCODER";
        };

        brightness_encoder: brightness_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_BRIGHTNESS_INC>, <&kp C_BRIGHTNESS_DEC>;

            tap-ms = <100>;
            label = "BRIGHTNESS_ENCODER";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        L_GUI {
            bindings = <&kp LEFT_GUI>;
            key-positions = <17 18>;
        };

        L_SHIFT {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <17 16>;
        };

        L_CTRL {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <16 15>;
        };

        L_ALT {
            bindings = <&kp LEFT_ALT>;
            key-positions = <15 14>;
        };

        R_GUI {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <22 23>;
        };

        R_SHIFT {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <23 24>;
        };

        R_CTRL {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <25 24>;
        };

        R_ALT {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <26 25>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESC  &kp SV_Q  &kp SV_W  &kp SV_E  &kp SV_R  &kp SV_T                             &kp UP                &kp SV_Y      &kp SV_U  &kp SV_I      &kp SV_O    &kp SV_P         &kp BSPC
&kp TAB  &kp SV_A  &kp SV_S  &kp SV_D  &kp SV_F  &kp SV_G                   &kp LEFT  &kp ENTER  &kp RIGHT  &kp SV_H      &kp SV_J  &kp SV_K      &kp SV_L    &kp SV_A_RING    &kp SV_A_UMLAUT
&none    &kp SV_Z  &kp SV_X  &kp SV_C  &kp SV_V  &kp SV_B     &kp C_MUTE              &kp DOWN              &kp SV_N      &kp SV_M  &kp SV_COMMA  &kp SV_DOT  &kp SV_O_UMLAUT  &kp SV_APOSTROPHE
                             &mo 3     &mo 2     &lt 1 SPACE                                                &lt 2 RETURN  &none     &none
            >;

            sensor-bindings = <&volume_encoder>;
        };

        mods_layer {
            display-name = "MOD";
            bindings = <
&none  &none  &none         &none         &kp CAPSLOCK       &caps_word                                &mmv MOVE_UP                     &kp HOME       &kp PAGE_DOWN    &kp PAGE_UP        &kp END        &none  &kp BSPC
&none  &none  &none         &none         &none              &none                     &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT       &kp DOWN         &kp UP             &kp RIGHT      &none  &none
&none  &none  &kp SV_CARET  &kp SV_TILDE  &kp SV_UNDERSCORE  &kp SV_QUESTION  &none                    &mmv MOVE_DOWN                   &sk RIGHT_GUI  &sk RIGHT_SHIFT  &sk RIGHT_CONTROL  &sk RIGHT_ALT  &none  &none
                            &trans        &trans             &trans                                                                     &trans         &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&none         &none             &kp RA(RS(N8))    &kp RS(RA(N9))       &kp SV_LEFT_PARENTHESIS  &kp SV_RIGHT_PARENTHESIS                           &mmv MOVE_UP                     &kp SV_N1  &kp SV_N2  &kp SV_N3  &kp SV_GRAVE  &kp SV_ACUTE  &kp BSPC
&kp SV_CARET  &kp SV_EQUAL      &kp SV_LESS_THAN  &kp SV_GREATER_THAN  &kp SV_LEFT_BRACKET      &kp SV_RIGHT_BRACKET               &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp SV_N4  &kp SV_N5  &kp SV_N6  &none         &none         &none
&kp PIPE      &kp SV_BACKSLASH  &kp SV_SLASH      &kp SV_STAR          &kp SV_MINUS             &kp SV_PLUS               &none                    &mmv MOVE_DOWN                   &kp SV_N7  &kp SV_N8  &kp SV_N9  &none         &none         &none
                                                  &trans               &trans                   &trans                                                                              &trans     &kp SV_N0  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        Fn {
            display-name = "Fn";
            bindings = <
&none  &none  &none  &kp C_PREVIOUS  &kp C_NEXT  &kp C_PLAY                                           &mmv MOVE_UP                     &kp F1  &kp F2   &kp F3   &kp F4   &none  &none
&none  &none  &none  &none           &none       &none                                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp F5  &kp F6   &kp F7   &kp F8   &none  &none
&none  &none  &none  &none           &none       &none       &kp C_BRIGHTNESS_AUTO                    &mmv MOVE_DOWN                   &kp F9  &kp F10  &kp F11  &kp F12  &none  &none
                     &trans          &trans      &trans                                                                                &trans  &trans   &trans
            >;

            sensor-bindings = <&brightness_encoder>;
        };

        Meta {
            bindings = <
&bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2                     &bt BT_SEL 3                    &bt BT_SEL 4  &bt BT_CLR                    &none         &none   &none   &none   &none  &none  &none
&none            &none            &none                            &none                           &none         &none                  &none  &none  &none  &none   &none   &none   &none  &none  &none
&rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &none         &out OUT_TOG  &none           &none         &none   &none   &none   &none  &none  &none
                                                                   &trans                          &trans        &trans                                      &trans  &trans  &trans
            >;

            sensor-bindings = <&hue_encoder>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        META-LAYER {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
